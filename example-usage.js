// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Irys Network —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
// –¶–µ–π —Ñ–∞–π–ª –ø–æ–∫–∞–∑—É—î, —è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–æ–≤—É —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É
let irysIntegration = null;
let connectedWallet = null;
let walletAddress = null;

// –ü—Ä–∏–∫–ª–∞–¥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
async function initializeExample() {
  console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏–∫–ª–∞–¥—É Irys Network —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó...');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≥–∞–º–∞–Ω—Ü—è
  if (typeof window.ethereum === 'undefined') {
    console.error('‚ùå MetaMask –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π');
    return false;
  }
  
  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
  try {
    const accounts = await window.ethereum.request({ 
      method: 'eth_requestAccounts' 
    });
    
    if (accounts.length > 0) {
      connectedWallet = 'MetaMask';
      walletAddress = accounts[0];
      console.log('‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π:', walletAddress);
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
      irysIntegration = window.IrysContractIntegration;
      const initialized = await irysIntegration.initialize(window.ethereum);
      
      if (initialized) {
        console.log('‚úÖ Irys Network —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
        return true;
      } else {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó');
        return false;
      }
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è:', error);
    return false;
  }
}

// –ü—Ä–∏–∫–ª–∞–¥ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏
async function startGameExample(gameMode = 'endless') {
  console.log(`üéÆ –ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏ –≤ —Ä–µ–∂–∏–º—ñ: ${gameMode}`);
  
  if (!irysIntegration) {
    console.error('‚ùå –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
    return;
  }
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É Irys
    const balance = await irysIntegration.getIrysBalance(walletAddress);
    console.log('üí∞ Irys –±–∞–ª–∞–Ω—Å:', balance);
    
    // –ü–æ—á–∞—Ç–æ–∫ —ñ–≥—Ä–æ–≤–æ—ó —Å–µ—Å—ñ—ó
    const result = await irysIntegration.startGameSession(gameMode, walletAddress);
    
    if (result.success) {
      console.log('‚úÖ –ì—Ä–∞ —É—Å–ø—ñ—à–Ω–æ –ø–æ—á–∞—Ç–∞!');
      console.log('Smart Contract TX:', result.smartContractTxHash);
      console.log('Irys Network TX:', result.irysTransactionId);
      console.log('Session ID:', result.sessionId);
      
      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
      window.currentGameSession = result.sessionId;
      window.currentIrysTransactionId = result.irysTransactionId;
      
      return result;
    } else {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏:', result.error);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
    return null;
  }
}

// –ü—Ä–∏–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –ø—ñ–¥ —á–∞—Å –≥—Ä–∏
async function updateScoreExample(score) {
  console.log(`üìä –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É: ${score}`);
  
  if (!irysIntegration || !window.currentGameSession) {
    console.error('‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó');
    return;
  }
  
  try {
    const result = await irysIntegration.updateGameScore(
      window.currentGameSession, 
      score
    );
    
    if (result.success) {
      console.log('‚úÖ –†–∞—Ö—É–Ω–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ!');
      console.log('Transaction hash:', result.transactionHash);
    } else {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É:', result.error);
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
  }
}

// –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
async function endGameExample(finalScore) {
  console.log(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏ –∑ —Ä–∞—Ö—É–Ω–∫–æ–º: ${finalScore}`);
  
  if (!irysIntegration || !window.currentGameSession) {
    console.error('‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó');
    return;
  }
  
  try {
    const result = await irysIntegration.endGameSession(
      window.currentGameSession,
      finalScore,
      walletAddress
    );
    
    if (result.success) {
      console.log('‚úÖ –ì—Ä–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      console.log('Smart Contract TX:', result.smartContractTxHash);
      console.log('Irys Network TX:', result.irysTransactionId);
      
      // –û—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
      delete window.currentGameSession;
      delete window.currentIrysTransactionId;
      
      return result;
    } else {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏:', result.error);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
    return null;
  }
}

// –ü—Ä–∏–∫–ª–∞–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è
async function getPlayerStatsExample() {
  console.log('üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞–≤—Ü—è...');
  
  if (!irysIntegration) {
    console.error('‚ùå –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
    return;
  }
  
  try {
    const stats = await irysIntegration.getPlayerStats(walletAddress);
    
    if (stats) {
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è:');
      console.log('- –í—Å—å–æ–≥–æ —ñ–≥–æ—Ä:', stats.totalGames);
      console.log('- –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫:', stats.totalScore);
      console.log('- –ù–∞–π–∫—Ä–∞—â–∏–π —Ä–∞—Ö—É–Ω–æ–∫:', stats.highScore);
      console.log('- –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∞—Ö—É–Ω–æ–∫:', stats.averageScore);
      
      return stats;
    } else {
      console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
      return null;
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
    return null;
  }
}

// –ü—Ä–∏–∫–ª–∞–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
async function getContractStatsExample() {
  console.log('üìà –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É...');
  
  if (!irysIntegration) {
    console.error('‚ùå –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
    return;
  }
  
  try {
    const stats = await irysIntegration.getContractStats();
    
    if (stats) {
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:');
      console.log('- –í—Å—å–æ–≥–æ —Å–µ—Å—ñ–π:', stats.totalSessions);
      console.log('- –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥:', stats.totalVolume, 'ETH');
      console.log('- –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:', stats.contractBalance, 'ETH');
      console.log('- –ö–æ–º—ñ—Å—ñ—è –∑–∞ —Å–µ—Å—ñ—é:', stats.gameSessionFee, 'ETH');
      
      return stats;
    } else {
      console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É');
      return null;
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
    return null;
  }
}

// –ü—Ä–∏–∫–ª–∞–¥ –ø–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É –≥—Ä–∏
async function fullGameExample() {
  console.log('üéÆ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –≥—Ä–∏...');
  
  // 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
  const initialized = await initializeExample();
  if (!initialized) {
    console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏');
    return;
  }
  
  // 2. –ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏
  const gameStart = await startGameExample('endless');
  if (!gameStart) {
    console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—á–∞—Ç–∏ –≥—Ä—É');
    return;
  }
  
  // 3. –°–∏–º—É–ª—è—Ü—ñ—è –≥—Ä–∏ (–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É)
  await updateScoreExample(100);
  await updateScoreExample(250);
  await updateScoreExample(500);
  
  // 4. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
  const gameEnd = await endGameExample(750);
  if (!gameEnd) {
    console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≥—Ä—É');
    return;
  }
  
  // 5. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  await getPlayerStatsExample();
  await getContractStatsExample();
  
  console.log('‚úÖ –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª –≥—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ü—Ä–∏–∫–ª–∞–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
async function errorHandlingExample() {
  console.log('‚ö†Ô∏è –ü—Ä–∏–∫–ª–∞–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫...');
  
  try {
    // –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—É —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é
    await irysIntegration.startGameSession('endless', walletAddress);
  } catch (error) {
    console.log('‚úÖ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞:', error.message);
  }
  
  try {
    // –°–ø—Ä–æ–±–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –Ω–µ—ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é
    await irysIntegration.endGameSession('invalid_session', 100, walletAddress);
  } catch (error) {
    console.log('‚úÖ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞:', error.message);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
async function runAllExamples() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤...');
  
  // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
  await errorHandlingExample();
  
  // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É –≥—Ä–∏
  await fullGameExample();
  
  console.log('‚úÖ –í—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—ñ –±—Ä–∞—É–∑–µ—Ä–∞
window.IrysExamples = {
  initialize: initializeExample,
  startGame: startGameExample,
  updateScore: updateScoreExample,
  endGame: endGameExample,
  getPlayerStats: getPlayerStatsExample,
  getContractStats: getContractStatsExample,
  fullGame: fullGameExample,
  errorHandling: errorHandlingExample,
  runAll: runAllExamples
};

console.log('üìö –ü—Ä–∏–∫–ª–∞–¥–∏ Irys Network —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!');
console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ window.IrysExamples –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è'); 