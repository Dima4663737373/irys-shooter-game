// –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –Ω–∞ —Ö—ñ–¥

// ‚è±Ô∏è –ó–ê–ü–£–°–ö –¢–ê–ô–ú–ï–†–ê –•–û–î–£
export function startMoveTimer() {
  if (this.gameMode !== 'endless') return;
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ª—ñ–º—ñ—Ç —á–∞—Å—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É –≥—Ä–∏
  const gameTime = (Date.now() - this.gameStartTime) / 1000;
  
  if (gameTime < 30) {
    this.moveTimeLimit = 3.0; // –ü–µ—Ä—à—ñ 30 —Å–µ–∫—É–Ω–¥ - 3 —Å–µ–∫—É–Ω–¥–∏ –Ω–∞ —Ö—ñ–¥
    this.moveTimePhase = 1;
  } else if (gameTime < 60) {
    this.moveTimeLimit = 2.0; // –ù–∞—Å—Ç—É–ø–Ω—ñ 30 —Å–µ–∫—É–Ω–¥ - 2 —Å–µ–∫—É–Ω–¥–∏ –Ω–∞ —Ö—ñ–¥
    this.moveTimePhase = 2;
  } else {
    this.moveTimeLimit = 1.5; // –ü—ñ—Å–ª—è 60 —Å–µ–∫—É–Ω–¥ - 1.5 —Å–µ–∫—É–Ω–¥–∏ –Ω–∞ —Ö—ñ–¥
    this.moveTimePhase = 3;
  }
  
  this.moveStartTime = Date.now();
  this.moveTimeRemaining = this.moveTimeLimit;
  this.isMoveActive = true;
  
  console.log(`‚è±Ô∏è MOVE TIMER: Started phase ${this.moveTimePhase}, limit ${this.moveTimeLimit}s`);
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
  this.createMoveTimerUI();
  
  // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
  if (this.moveTimerInterval) clearInterval(this.moveTimerInterval);
  this.moveTimerInterval = setInterval(() => {
    this.updateMoveTimer();
  }, 50); // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—ñ 50–º—Å –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ
}

// ‚è±Ô∏è –û–ù–û–í–õ–ï–ù–ù–Ø –¢–ê–ô–ú–ï–†–ê –•–û–î–£
export function updateMoveTimer() {
  if (!this.isMoveActive || this.shootingBubble?.moving) return;
  
  const elapsed = (Date.now() - this.moveStartTime) / 1000;
  this.moveTimeRemaining = Math.max(0, this.moveTimeLimit - elapsed);
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
  this.updateMoveTimerUI();
  
  // –Ø–∫—â–æ —á–∞—Å –≤–∏–π—à–æ–≤ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç—Ä—ñ–ª—è—î–º–æ
  if (this.moveTimeRemaining <= 0) {
    console.log(`‚è∞ TIME'S UP! Auto-shooting bubble`);
    this.autoShoot();
  }
}

// üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ô –ü–û–°–¢–†–Ü–õ –ü–†–ò –ó–ê–ö–Ü–ù–ß–ï–ù–ù–Ü –ß–ê–°–£
export function autoShoot() {
  if (!this.shootingBubble || this.shootingBubble.moving) return;
  
  // –°—Ç—Ä—ñ–ª—è—î–º–æ –ø—Ä—è–º–æ –≤–≥–æ—Ä—É (–±–µ–∑–ø–µ—á–Ω–∏–π –∫—É—Ç)
  this.shootingAngle = Math.PI / 2; // 90 –≥—Ä–∞–¥—É—Å—ñ–≤
  
  this.playSound('shoot');
  this.shotsCount++;
  
  const speed = 850;
  this.shootingBubble.dx = Math.cos(this.shootingAngle) * speed;
  this.shootingBubble.dy = -Math.sin(this.shootingAngle) * speed;
  this.shootingBubble.moving = true;
  
  console.log(`üéØ AUTO-SHOT: Bubble shot automatically due to time limit`);
  
  // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä —Ö–æ–¥—É
  this.stopMoveTimer();
}

// ‚èπÔ∏è –ó–£–ü–ò–ù–ö–ê –¢–ê–ô–ú–ï–†–ê –•–û–î–£
export function stopMoveTimer() {
  this.isMoveActive = false;
  if (this.moveTimerInterval) {
    clearInterval(this.moveTimerInterval);
    this.moveTimerInterval = null;
  }
  
  // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
  this.hideMoveTimerUI();
}

// üé® –°–¢–í–û–†–ï–ù–ù–Ø –í–Ü–ó–£–ê–õ–¨–ù–û–ì–û –Ü–ù–î–ò–ö–ê–¢–û–†–ê –¢–ê–ô–ú–ï–†–ê
export function createMoveTimerUI() {
  // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —è–∫—â–æ —î
  const existingTimer = document.getElementById('move-timer');
  if (existingTimer) {
    existingTimer.remove();
  }
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä
  const timerContainer = document.createElement('div');
  timerContainer.id = 'move-timer';
  timerContainer.style.cssText = `
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    padding: 12px 20px;
    border-radius: 25px;
    font-weight: bold;
    font-size: 1.1rem;
    box-shadow: 0 8px 24px rgba(102,126,234,0.4);
    z-index: 1000;
    border: 2px solid rgba(255,255,255,0.3);
    min-width: 200px;
    text-align: center;
    animation: slideInDown 0.3s ease-out;
  `;
  
  timerContainer.innerHTML = `
    <div style="display: flex; align-items: center; justify-content: center; gap: 10px;">
      <span>‚è±Ô∏è Phase ${this.moveTimePhase}</span>
      <div id="timer-bar-container" style="flex: 1; height: 8px; background: rgba(255,255,255,0.3); border-radius: 4px; overflow: hidden;">
        <div id="timer-bar" style="height: 100%; background: linear-gradient(90deg, #4CAF50, #FFC107, #F44336); border-radius: 4px; transition: width 0.05s linear;"></div>
      </div>
      <span id="timer-text">${this.moveTimeLimit.toFixed(1)}s</span>
    </div>
  `;
  
  document.body.appendChild(timerContainer);
}

// üîÑ –û–ù–û–í–õ–ï–ù–ù–Ø –í–Ü–ó–£–ê–õ–¨–ù–û–ì–û –Ü–ù–î–ò–ö–ê–¢–û–†–ê
export function updateMoveTimerUI() {
  const timerText = document.getElementById('timer-text');
  const timerBar = document.getElementById('timer-bar');
  
  if (timerText && timerBar) {
    timerText.textContent = `${this.moveTimeRemaining.toFixed(1)}s`;
    
    const percentage = (this.moveTimeRemaining / this.moveTimeLimit) * 100;
    timerBar.style.width = `${percentage}%`;
    
    // –ó–º—ñ–Ω—é—î–º–æ –∫–æ–ª—ñ—Ä –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è
    if (percentage > 60) {
      timerBar.style.background = '#4CAF50'; // –ó–µ–ª–µ–Ω–∏–π
    } else if (percentage > 30) {
      timerBar.style.background = '#FFC107'; // –ñ–æ–≤—Ç–∏–π
    } else {
      timerBar.style.background = '#F44336'; // –ß–µ—Ä–≤–æ–Ω–∏–π
      
      // –î–æ–¥–∞—î–º–æ –ø—É–ª—å—Å–∞—Ü—ñ—é –∫–æ–ª–∏ —á–∞—Å –º–∞–π–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è
      if (percentage < 20) {
        const container = document.getElementById('move-timer');
        if (container) {
          container.style.animation = 'pulse 0.5s infinite';
        }
      }
    }
  }
}

// üôà –ü–†–ò–•–û–í–£–í–ê–ù–ù–Ø –Ü–ù–î–ò–ö–ê–¢–û–†–ê
export function hideMoveTimerUI() {
  const timerContainer = document.getElementById('move-timer');
  if (timerContainer) {
    timerContainer.style.animation = 'slideOutUp 0.3s ease-in';
    setTimeout(() => {
      if (timerContainer.parentNode) {
        timerContainer.parentNode.removeChild(timerContainer);
      }
    }, 300);
  }
}