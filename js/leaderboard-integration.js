// Leaderboard Smart Contract Integration
class LeaderboardIntegration {
    constructor() {
        // –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É - –æ–Ω–æ–≤—ñ—Ç—å –ø—ñ—Å–ª—è –¥–µ–ø–ª–æ—é
        this.contractAddress = "0xb2eA84Ac0ffFcE45B301B84Efff88858e588D235"; // GameContract deployed on Irys testnet
        
        this.contractABI = [
            {
                "inputs": [
                    {"internalType": "uint256", "name": "score", "type": "uint256"},
                    {"internalType": "string", "name": "playerName", "type": "string"},
                    {"internalType": "string", "name": "gameMode", "type": "string"}
                ],
                "name": "saveScore",
                "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"internalType": "address", "name": "player", "type": "address"}],
                "name": "getLeaderboard",
                "outputs": [{
                    "components": [
                        {"internalType": "address", "name": "player", "type": "address"},
                        {"internalType": "string", "name": "playerName", "type": "string"},
                        {"internalType": "uint256", "name": "score", "type": "uint256"},
                        {"internalType": "string", "name": "gameMode", "type": "string"},
                        {"internalType": "uint256", "name": "timestamp", "type": "uint256"},
                        {"internalType": "bool", "name": "claimed", "type": "bool"}
                    ],
                    "internalType": "struct GameContract.LeaderboardEntry",
                    "name": "",
                    "type": "tuple"
                }],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [{"internalType": "uint256", "name": "limit", "type": "uint256"}],
                "name": "getTopPlayers",
                "outputs": [{
                    "components": [
                        {"internalType": "address", "name": "player", "type": "address"},
                        {"internalType": "string", "name": "playerName", "type": "string"},
                        {"internalType": "uint256", "name": "score", "type": "uint256"},
                        {"internalType": "string", "name": "gameMode", "type": "string"},
                        {"internalType": "uint256", "name": "timestamp", "type": "uint256"},
                        {"internalType": "bool", "name": "claimed", "type": "bool"}
                    ],
                    "internalType": "struct GameContract.LeaderboardEntry[]",
                    "name": "",
                    "type": "tuple[]"
                }],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getTotalPlayers",
                "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "anonymous": false,
                "inputs": [
                    {"indexed": true, "internalType": "address", "name": "player", "type": "address"},
                    {"indexed": false, "internalType": "string", "name": "playerName", "type": "string"},
                    {"indexed": false, "internalType": "uint256", "name": "score", "type": "uint256"},
                    {"indexed": false, "internalType": "string", "name": "gameMode", "type": "string"},
                    {"indexed": false, "internalType": "uint256", "name": "timestamp", "type": "uint256"}
                ],
                "name": "ScoreSaved",
                "type": "event"
            }
        ];
        this.contract = null;
        this.web3 = null;
        this.isInitialized = false;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    setContractAddress(address) {
        this.contractAddress = address;
        this.isInitialized = false;
        console.log('üìç –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–∞:', address);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ Irys testnet
    async ensureIrysNetwork() {
        try {
            if (typeof window.ethereum === 'undefined') {
                throw new Error('‚ùå MetaMask –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            const chainId = await window.ethereum.request({ method: 'eth_chainId' });
            const irysChainId = '0x4F6'; // 1270 –≤ hex
            
            if (chainId !== irysChainId) {
                console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ Irys testnet...');
                try {
                    await window.ethereum.request({
                        method: 'wallet_switchEthereumChain',
                        params: [{ chainId: irysChainId }]
                    });
                } catch (switchError) {
                    // –Ø–∫—â–æ –º–µ—Ä–µ–∂–∞ –Ω–µ –¥–æ–¥–∞–Ω–∞, –¥–æ–¥–∞—î–º–æ —ó—ó
                    if (switchError.code === 4902) {
                        await window.ethereum.request({
                            method: 'wallet_addEthereumChain',
                            params: [{
                                chainId: irysChainId,
                                chainName: 'Irys Testnet',
                                nativeCurrency: {
                                    name: 'IRYS',
                                    symbol: 'IRYS',
                                    decimals: 18
                                },
                                rpcUrls: [
                                    'https://testnet-rpc.irys.xyz/v1/execution-rpc',
                                    'https://rpc.testnet.irys.xyz',
                                    'https://irys-testnet.rpc.thirdweb.com'
                                ],
                                blockExplorerUrls: ['https://testnet-explorer.irys.xyz/']
                            }]
                        });
                    } else {
                        throw switchError;
                    }
                }
            }
            console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Irys testnet');
            return true;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º–µ—Ä–µ–∂—ñ:', error);
            throw error;
        }
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ —Ä–µ–∑–µ—Ä–≤–Ω–∏–º–∏ RPC endpoints
    async initialize() {
        try {
            if (this.contractAddress === "0x0000000000000000000000000000000000000000") {
                throw new Error('‚ùå –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ setContractAddress()');
            }

            if (typeof window.ethereum !== 'undefined') {
                // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –º–µ—Ä–µ–∂—ñ
                await this.ensureIrysNetwork();
                
                this.web3 = new Web3(window.ethereum);
                this.contract = new this.web3.eth.Contract(this.contractABI, this.contractAddress);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —ñ—Å–Ω—É—î –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫ RPC
                const contractExists = await this.verifyContractWithFallback();
                if (!contractExists) {
                    console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–ª–µ–º–∏ –∑ RPC. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É...');
                }
                
                this.isInitialized = true;
                console.log('‚úÖ –õ—ñ–¥–µ—Ä–±–æ—Ä–¥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ –Ω–∞ Irys testnet');
                return true;
            }
            console.warn('‚ö†Ô∏è MetaMask –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –ª—ñ–¥–µ—Ä–±–æ—Ä–¥ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ —Ä–µ–∂–∏–º—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è');
            this.isInitialized = false;
            return false;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
            // –ù–∞–≤—ñ—Ç—å —è–∫—â–æ —î –ø–æ–º–∏–ª–∫–∏ RPC, –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É
            if (error.message.includes('521') || error.message.includes('HTTP request failed')) {
                console.warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∏ –∑ RPC —Å–µ—Ä–≤–µ—Ä–æ–º, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É –≤ –æ–±–º–µ–∂–µ–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ');
                this.isInitialized = true;
                return true;
            }
            this.isInitialized = false;
            return false;
        }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –∑ —Ä–µ–∑–µ—Ä–≤–Ω–∏–º–∏ RPC
    async verifyContractWithFallback() {
        const rpcUrls = [
            'https://testnet-rpc.irys.xyz/v1/execution-rpc',
            'https://rpc.testnet.irys.xyz',
            'https://irys-testnet.rpc.thirdweb.com'
        ];

        for (const rpcUrl of rpcUrls) {
            try {
                console.log(`üîÑ –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —á–µ—Ä–µ–∑ ${rpcUrl}...`);
                const tempWeb3 = new Web3(rpcUrl);
                const code = await tempWeb3.eth.getCode(this.contractAddress);
                if (code === '0x') {
                    console.warn(`‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é ${this.contractAddress}`);
                    return false;
                }
                console.log(`‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —á–µ—Ä–µ–∑ ${rpcUrl}`);
                return true;
            } catch (error) {
                console.warn(`‚ö†Ô∏è RPC ${rpcUrl} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:`, error.message);
                continue;
            }
        }
        
        console.warn('‚ö†Ô∏è –í—Å—ñ RPC endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É');
        return false;
    }

    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
    async connectWallet() {
        try {
            if (typeof window.ethereum !== 'undefined') {
                // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –º–µ—Ä–µ–∂—ñ
                await this.ensureIrysNetwork();
                
                await window.ethereum.request({ method: 'eth_requestAccounts' });
                
                // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ web3 —è–∫—â–æ —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
                if (!this.web3) {
                    this.web3 = new Web3(window.ethereum);
                }
                
                const accounts = await this.web3.eth.getAccounts();
                console.log('üîó –ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Irys testnet:', accounts[0]);
                return accounts[0];
            }
            throw new Error('‚ùå MetaMask –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è:', error);
            throw error;
        }
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –≤ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥
    async saveScore(score, playerName = '', gameMode = 'endless') {
        try {
            if (!this.isInitialized) {
                throw new Error('‚ùå –õ—ñ–¥–µ—Ä–±–æ—Ä–¥ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            }

            const accounts = await this.web3.eth.getAccounts();
            if (accounts.length === 0) {
                throw new Error('‚ùå –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
            }

            const account = accounts[0];
            
            // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∑ localStorage —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
            const finalPlayerName = playerName || localStorage.getItem('playerName') || 'Anonymous';
            
            console.log('üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É:', score, '–¥–ª—è –≥—Ä–∞–≤—Ü—è:', finalPlayerName, '—Ä–µ–∂–∏–º:', gameMode);
            
            // –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó saveScore –∑ –Ω–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            const result = await this.contract.methods.saveScore(score, finalPlayerName, gameMode).send({
                from: account,
                gas: 400000 // –ó–±—ñ–ª—å—à—É—î–º–æ –≥–∞–∑ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            });

            console.log('‚úÖ –†–∞—Ö—É–Ω–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', result.transactionHash);
            return result;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É:', error);
            throw error;
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –≥—Ä–∞–≤—Ü—è
    async getPlayerScore(playerAddress) {
        try {
            if (!this.isInitialized) {
                throw new Error('‚ùå –õ—ñ–¥–µ—Ä–±–æ—Ä–¥ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            }

            const result = await this.contract.methods.getLeaderboard(playerAddress).call();
            return {
                player: result.player,
                playerName: result.playerName,
                score: parseInt(result.score),
                gameMode: result.gameMode,
                timestamp: parseInt(result.timestamp),
                claimed: result.claimed
            };
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É:', error);
            throw error;
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤ –∑ —Ä–µ–∑–µ—Ä–≤–Ω–∏–º–∏ RPC
    async getTopPlayers(limit = 10) {
        try {
            if (!this.isInitialized) {
                throw new Error('‚ùå –õ—ñ–¥–µ—Ä–±–æ—Ä–¥ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            }

            // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ –ø–æ—Ç–æ—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            try {
                const result = await this.contract.methods.getTopPlayers(limit).call();
                return result.map(entry => ({
                    player: entry.player,
                    playerName: entry.playerName,
                    score: parseInt(entry.score),
                    gameMode: entry.gameMode,
                    timestamp: parseInt(entry.timestamp),
                    claimed: entry.claimed
                })).filter(entry => entry.score > 0);
            } catch (rpcError) {
                if (rpcError.message.includes('521') || rpcError.message.includes('HTTP request failed')) {
                    console.warn('‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∏–π RPC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—ñ endpoints...');
                    return await this.getTopPlayersWithFallback(limit);
                }
                throw rpcError;
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤:', error);
            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –∑–∞–º—ñ—Å—Ç—å –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ UX
            return [];
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ñ RPC
    async getTopPlayersWithFallback(limit = 10) {
        const rpcUrls = [
            'https://rpc.testnet.irys.xyz',
            'https://irys-testnet.rpc.thirdweb.com'
        ];

        for (const rpcUrl of rpcUrls) {
            try {
                console.log(`üîÑ –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ ${rpcUrl}...`);
                const tempWeb3 = new Web3(rpcUrl);
                const tempContract = new tempWeb3.eth.Contract(this.contractABI, this.contractAddress);
                const result = await tempContract.methods.getTopPlayers(limit).call();
                console.log(`‚úÖ –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ —á–µ—Ä–µ–∑ ${rpcUrl}`);
                return result.map(entry => ({
                    player: entry.player,
                    playerName: entry.playerName,
                    score: parseInt(entry.score),
                    gameMode: entry.gameMode,
                    timestamp: parseInt(entry.timestamp),
                    claimed: entry.claimed
                })).filter(entry => entry.score > 0);
            } catch (error) {
                console.warn(`‚ö†Ô∏è RPC ${rpcUrl} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è:`, error.message);
                continue;
            }
        }
        
        console.warn('‚ö†Ô∏è –í—Å—ñ RPC endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö');
        return [];
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤ –∑ —Ä–µ–∑–µ—Ä–≤–Ω–∏–º–∏ RPC
    async getTotalPlayers() {
        try {
            if (!this.isInitialized) {
                throw new Error('‚ùå –õ—ñ–¥–µ—Ä–±–æ—Ä–¥ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            }

            // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ –ø–æ—Ç–æ—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            try {
                const result = await this.contract.methods.getTotalPlayers().call();
                return parseInt(result);
            } catch (rpcError) {
                if (rpcError.message.includes('521') || rpcError.message.includes('HTTP request failed')) {
                    console.warn('‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∏–π RPC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—ñ endpoints...');
                    return await this.getTotalPlayersWithFallback();
                }
                throw rpcError;
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤:', error);
            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 0 –∑–∞–º—ñ—Å—Ç—å –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ UX
            return 0;
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ñ RPC
    async getTotalPlayersWithFallback() {
        const rpcUrls = [
            'https://rpc.testnet.irys.xyz',
            'https://irys-testnet.rpc.thirdweb.com'
        ];

        for (const rpcUrl of rpcUrls) {
            try {
                console.log(`üîÑ –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤ —á–µ—Ä–µ–∑ ${rpcUrl}...`);
                const tempWeb3 = new Web3(rpcUrl);
                const tempContract = new tempWeb3.eth.Contract(this.contractABI, this.contractAddress);
                const result = await tempContract.methods.getTotalPlayers().call();
                console.log(`‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ —á–µ—Ä–µ–∑ ${rpcUrl}`);
                return parseInt(result);
            } catch (error) {
                console.warn(`‚ö†Ô∏è RPC ${rpcUrl} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ:`, error.message);
                continue;
            }
        }
        
        console.warn('‚ö†Ô∏è –í—Å—ñ RPC endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤');
        return 0;
    }

    async clearAllScores() {
        try {
            if (!this.contract) {
                throw new Error('Contract not initialized');
            }
            
            // This would require an admin function in the smart contract
            // For now, we'll throw an error indicating this feature needs contract support
            throw new Error('Clear all scores function requires admin privileges in smart contract');
        } catch (error) {
            console.error('Error clearing all scores:', error);
            throw error;
        }
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
window.LeaderboardIntegration = LeaderboardIntegration;